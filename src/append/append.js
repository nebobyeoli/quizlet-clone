function getTarget(targetSelector) {
    const target = typeof targetSelector == 'string' ? document.querySelector(targetSelector) : targetSelector;
    if (target == null) console.log(`target is null : ${targetSelector}`);
    return target; // = target == null ? null : target
}

function appendSVG(targetSelector, attributes = {}, path_ds = [], path_fills = [], path_strokes = []) {
    const target = getTarget(targetSelector);
    if (target == null) return null;

    let svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    Object.entries(attributes).map(attr => svg.setAttribute(attr[0], attr[1]));

    if (path_ds) path_ds.forEach((dss, i) => {

        let path = document.createElementNS(svg.namespaceURI, 'path');

        path.setAttribute('d', dss);

        if (path_fills[i]) path.setAttribute('fill', path_fills[i]);
        if (path_strokes[i]) path.setAttribute('stroke', path_strokes[i]);

        svg.appendChild(path);
    });

    target.appendChild(svg);
    return svg;
}

function appendElement(targetSelector, newTagType, attributes = {}) {
    const target = getTarget(targetSelector);
    if (target == null) return null;

    let el;
    if (newTagType.includes('ns:')) el = document.createElementNS('http://www.w3.org/2000/svg', newTagType.split('ns:')[1]);
    else el = document.createElement(newTagType);

    Object.entries(attributes).map(attr => el.setAttribute(attr[0], attr[1]));

    target.appendChild(el);
    return el;
}

function appendElementAsFirst(targetSelector, newTagType, attributes = {}) {
    const target = getTarget(targetSelector);
    if (target == null) return null;

    let el;
    if (newTagType.includes('ns:')) el = document.createElementNS('http://www.w3.org/2000/svg', newTagType.split('ns:')[1]);
    else el = document.createElement(newTagType);
    Object.entries(attributes).map(attr => el.setAttribute(attr[0], attr[1]));

    // note: outerHTML throws exceptions if parentNode of target doesn't exist
    target.innerHTML = el.outerHTML + target.innerHTML;
    return el;
}

function appendElementBefore(targetSelector, newTagType, attributes = {}) {
    const target = getTarget(targetSelector);
    if (target == null) return null;

    let parentNode = target.parentNode;

    let el = document.createElement(newTagType);
    Object.entries(attributes).map(attr => el.setAttribute(attr[0], attr[1]));

    parentNode.insertBefore(el, target);
    return el;
}

try
{
    // Append span#search, span#create svg

    appendSVG('span#search', {
        height: '.9rem',
        viewBox: '0 0 257.4 54.9'
    }, [
        'M86 3.7c4.3.1 7.9 1.9 9.8 3.7 1.3 1.2 3.5 4.4 1.9 5.5-1.2.8-3.7-.1-4.7-.9-1.9-1.5-4.9-2.6-7-2.7-5.6-.2-8.5 2.8-8.5 5.8 0 2.6 2.5 4.5 4.9 5.6C90.1 24.1 101 27.2 101 38c0 5.8-5.3 11.9-14 12.2-6.5.2-14.6-2.8-15.8-10.3-.4-2.8 1.3-4.9 2.6-4.9 1.4 0 2.5 3.2 2.8 3.9 1.8 4.2 6.7 5.9 9.8 5.8 4.2-.1 8-2.6 8-6.9 0-4.7-8-9-13.9-11.3-5.1-2-8.9-5.8-8.9-10.2 0-8.2 6.1-12.9 14.4-12.6zM104.8 32.6c1.1-8.5 7.4-14.3 16.1-13.7 7.4.6 9.8 7.6 10.1 9.9.9.8 1.7 2.2 1.7 2.7-.1.7-1.1 1.2-2.8 1.6-2.7.6-14.4 1.7-18.3 1.5-.3 3.5.4 9.6 6.7 9.8 2 .2 4.9-.5 5.8-.8 3.5-1.2 4.9-2.2 5.5-1.5.6.6.1 2.8-2.7 5-2.8 2.1-6.3 2.6-8.8 2.6-9.8-.2-14.4-9.2-13.3-17.1zm13.1-9.3c-3.5.6-5.5 4.4-6 7.3 5-.8 8.9-1.4 13.1-1.9-.5-2.8-3.3-6.1-7.1-5.4zM157.6 29.7c0-3.9-2-8.4-7.7-8.4-2.3 0-4.6.5-6.2.9-3.3.8-5.1.7-5.4-.3-.8-2.2 4.9-6.4 12.4-6.4 7.6 0 13 5.5 13 12.5v15.1c0 1.4 0 4 .5 5.7.3 1.4.4 2.2.1 2.5-.5.3-1.6.3-2.5-.1-1.2-.5-2.4-1.9-3.3-4.3-.9 1.1-4.9 3.9-9.8 4.1-9.6.2-13-4.6-13.2-10-.2-5.6 4-11.1 13.7-10.9 2.7.1 6.4 1.1 8.3 2.5v-2.9zm.1 6.7c-2.6-.9-5.8-1.7-8.9-1.6-4.6.1-6.9 1.9-6.9 5.6 0 3.6 2.3 4.5 6.8 4.5 3.1 0 6.9-1.6 9-3.3v-5.2zM172.7 21.4c-1.2-.9-3.7-1.9-3.7-3.7 0-.6 1.4-1.2 2-1.4 1.2-.3 3.5-1 5.1-.7 1.1.2 2.6 1.8 2.6 2.8v1.7c2.2-1.9 5.3-3 6.9-3 2.7 0 4.6 1.4 5.5 3.5.3.7.8 2.4.3 3-.3.6-1.5 1.9-2.5 1.7-1.5-.2-2.8-2.8-4.6-2.8-2.1 0-4.4 1.5-5.7 2.9v12.5c0 5.9 0 12.8-1.8 12.8-1.7 0-4.1-3.7-4.1-10.4V21.4zM219.2 25.3c-.8.3-2.4-.8-3.8-1.6-.9-.5-3.2-1.4-5.7-1.2-4.9.5-7.7 5.3-7.5 11.9.2 5.8 2.9 11.5 8.8 11.3 3.4-.1 6-1.1 8-2.4 1.4-.8 3.2-2 3.7-1.4.6 1-1 3.2-1.9 4.2-2.6 2.8-6.7 4.3-10.7 4.3-9.1 0-14.6-7.1-14.8-15.9-.2-8.5 4.9-16.6 13.2-17.1 4.5-.3 7.7 1.6 9.2 2.7 1.9 1.8 2.6 4.7 1.5 5.2zM229.5 8c0-.5-.2-.8-.6-.8-.8 0-2.5 0-3.6-.3s-1.9-1.4-1.9-1.7c0-.6 1.4-1.5 2-1.9 2.2-1.1 5.5-2.4 7.5-2.4 1.1 0 2.6 2.1 2.6 2.8V21c1.6-1.9 4.7-3.6 8-3.6 6.3 0 11.6 4 11.6 14.6 0 5.1-1 13 .6 18.2.4 1.2 1.5 2.8.8 3.6-.7.5-3.3-.3-4.1-.8-3.7-2.4-3.6-8.9-3.6-13.7.2-11.4-1.7-14.4-5.8-15.2-2.1-.4-5.7.2-7.5 2.1v11.5c0 9-3.1 13.5-5.3 13.1-1.2-.2-.6-8-.6-12.3V8z',
        'M49.3 47.6l-12-12-.1-.1c2.4-3.3 3.9-7.4 3.9-11.8 0-11-9-20-20-20s-20 9-20 20 9 20 20 20c4.2 0 8-1.3 11.3-3.5.1.1.1.2.2.2l12 12c.7.7 1.5 1 2.4 1 .9 0 1.7-.3 2.4-1 1.2-1.3 1.2-3.5-.1-4.8zM21.1 36.9c-7.3 0-13.2-5.9-13.2-13.2 0-7.3 5.9-13.2 13.2-13.2 7.3 0 13.2 5.9 13.2 13.2 0 7.3-5.9 13.2-13.2 13.2z'
    ]);

    appendSVG('span#create', {
        height: '.9rem',
        viewBox: '0 0 250.9 54.9'
    }, [
        'M43.6 52.5H5.8c-1.7 0-3-1.3-3-3V11.7c0-1.7 1.3-3 3-3h18.9c1.7 0 3 1.3 3 3s-1.3 3-3 3H8.8v31.8h31.8V30.6c0-1.7 1.3-3 3-3s3 1.3 3 3v18.9c0 1.7-1.3 3-3 3z',
        'M46.3 20c0 .3-.1.7-.4.9-.7.7-2.1.8-3.3.8h-2.8c-.7 0-1.3-.1-2-.1 0 1.8 0 3.9-.2 5.6-.2 1.2-1.4 5.3-3.4 5.3-.3 0-.5-.1-.7-.3-.6-.6-.6-2.1-.6-3.7v-2.1-4.5c-.6 0-1.2.1-1.8.1-.9.1-1.7.1-2.6.1-2.1 0-5.2 0-5.2-1.8 0-.4.6-1.6 3.1-2 2.1-.3 3.9-.5 5.9-.7h.3c0-1.7-.1-3-.3-5.4v-.5c-.1-1.3-.2-3 1.1-3.2.6-.1 1.2.1 1.8.5 1.1.8 2 2.5 2.2 4 .2 1.7.2 3 .2 4.3v.1c1.4-.1 2.5 0 3.4 0h1.1c2.2-.2 4.1 1.1 4.2 2.6zM81.8 18.7c-1.5 3.1-2 8.5-1.8 11.8.3 4.6 2.7 12.7 9.1 13.7 3.9.6 7.5-.7 9.3-1.6 2-1 6.1-3.5 7-2.2 1.2 1.4-1.7 4.9-4.4 6.9-2.5 1.8-6.6 3.3-10.2 3.4-5 .1-9.9-1.5-13-5-3.6-3.9-5.6-12.9-4.7-19.9C74.2 17.2 79.5 6.2 91 5.1c5-.5 11.6 1.8 11.4 3.3-.3 2.2-3.7 2.2-5.6 1.8-2.2-.5-4.2-.5-6.3.3-4.7 1.4-7.2 5.4-8.7 8.2zM111.1 21.2c-1.2-.9-3.7-1.9-3.7-3.6 0-.6 1.4-1.2 2-1.4 1.2-.3 3.4-1 5-.7 1.1.2 2.5 1.8 2.5 2.7V20c2.2-1.9 5.2-2.9 6.7-2.9 2.7 0 4.5 1.4 5.4 3.5.3.7.7 2.3.3 2.9-.3.5-1.5 1.8-2.5 1.7-1.5-.2-2.8-2.7-4.5-2.7-2 0-4.4 1.4-5.6 2.9v12.3c0 5.8 0 12.6-1.8 12.6-1.6 0-4-3.7-4-10.2V21.2zM133.1 32.2c1.1-8.4 7.3-14 15.8-13.5 7.3.5 9.6 7.5 9.9 9.7.9.7 1.6 2.2 1.6 2.7-.1.7-1.1 1.2-2.8 1.6-2.7.5-14.2 1.7-18 1.5-.3 3.5.4 9.4 6.5 9.6 2 .2 4.8-.5 5.6-.8 3.5-1.2 4.8-2.2 5.4-1.4.5.5.1 2.7-2.7 4.9-2.7 2-6.2 2.5-8.6 2.5-9.3-.2-13.8-9.1-12.7-16.8zm12.8-9.1c-3.4.5-5.4 4.3-5.9 7.1 4.9-.7 8.8-1.4 12.9-1.9-.6-2.7-3.3-5.9-7-5.2zM184.9 29.4c0-3.8-2-8.2-7.6-8.2-2.2 0-4.5.5-6.1.9-3.3.8-5 .7-5.3-.3-.7-2.2 4.8-6.3 12.2-6.3 7.4 0 12.8 5.4 12.8 12.3v14.8c0 1.4 0 3.9.5 5.6.3 1.4.4 2.2.1 2.5-.5.3-1.6.3-2.5-.1-1.2-.5-2.4-1.8-3.2-4.2-.9 1.1-4.8 3.8-9.6 4-9.5.2-12.8-4.6-13-9.8-.2-5.5 3.9-10.9 13.5-10.7 2.7.1 6.3 1.1 8.2 2.5v-3zm0 6.6c-2.5-.9-5.7-1.6-8.8-1.6-4.5.1-6.7 1.9-6.7 5.5 0 3.5 2.2 4.4 6.7 4.4 3 0 6.8-1.6 8.8-3.3v-5zM203 16.5c0-2.8-.1-4.2-1.4-5.9-.5-.6-.2-2.6.5-3.1 1.5-.7 6.4 2.9 6.9 4 .4.5.6 1 .6 1.6-.4 1.6-.4 2.7-.4 4.3V19c2-.3 4.1-.6 6.1-1 1-.2 3 .5 3.1 1.1 0 1.4-1.9 3.8-3.3 3.8-1.3 0-2.6.1-3.8.2l-2.1.2v9c0 6.3-.1 13.7 5.3 13.7 1.2 0 3.4-.5 3.4.3 0 .7-1.2 2.9-4.4 3.3-3.5.5-6.9-1-8.4-3.3-2.2-3.1-2.2-7.2-2.2-13.8v-8.6c-1.2.1-2.5.1-3.9.1-1.1 0-3.8-1.2-3.8-2.7.1-.5.5-1.3.7-1.4.8 0 1.8-.1 2.7-.1l4.4-.5v-2.8zM221.3 32.2c1.1-8.4 7.3-14 15.8-13.5 7.3.5 9.6 7.5 9.9 9.7.9.7 1.6 2.2 1.6 2.7-.1.7-1.1 1.2-2.8 1.6-2.7.5-14.2 1.7-18 1.5-.3 3.5.4 9.4 6.5 9.6 2 .2 4.8-.5 5.6-.8 3.5-1.2 4.8-2.2 5.4-1.4.5.5.1 2.7-2.7 4.9-2.7 2-6.2 2.5-8.6 2.5-9.3-.2-13.8-9.1-12.7-16.8zm12.8-9.1c-3.4.5-5.4 4.3-5.9 7.1 4.9-.7 8.8-1.4 12.9-1.9-.6-2.7-3.3-5.9-7-5.2z'
    ]);
}
catch (err) {
    console.error(err);
}


try
{
    // Append .usericon span

    appendSVG('span#quizlet', {
        height: '1.6rem',
        viewBox: '0 0 214 54.9'
    }, [
        'M23.5 53.6C9.9 53.6 1.2 42.9 1.4 28.2c.2-13 9.7-24.8 24.7-25C40.5 3 48.4 17.1 47.5 28.7c-.5 6.5-3.2 13-7.1 17.1 2.5 2.7 5.4 5 9.2 6.9.5.2 1.7.6 1.7.9 0 1.4-2.9 2.2-4.5 2.2-3.6 0-9.2-2.8-11.5-5.1-3.5 1.9-7.6 2.9-11.8 2.9zm2.8-43.8C16.2 9.5 8.1 17.3 7.8 27.7c-.4 10.6 6.2 20.6 17 19.6 2.2-.2 4.4-1.1 6.2-2.3-.5-1.3-2-3.7-2.3-5.2-.4-1.3.3-5.4 1.2-5.5 1.9-.4 5.4 5.1 6.4 6.3 2.8-2.6 5.1-7.5 5.3-11.8.6-8.7-5-18.8-15.3-19zM63.6 34.6c0 6.2.3 11.7 5.5 12.3 1.8.2 3.7-.3 5.2-1 .4-.1 1.6-.7 2.7-1l1-.3V22.1c-1.4-.9-2.5-2.2-2.8-3.9-.2-.8-.1-2.8.8-2.8.5 0 1.3.2 1.9.4 1.4.5 3.9 1.6 5.2 2.5.9.7 1.3 1.6 1.3 3.1v25.4c0 1.3.4 2.8.9 3.7.6 1.4 1.3 2.6.7 3.1-.5.5-3.2 0-4.3-.6-1.3-.7-2.2-1.6-2.8-2.5-.2-.4-.4-.7-.5-1.1l-1 .9c-2.1 2-5.4 3.7-8.9 3.7-6.9 0-11.3-4.8-11.5-15.6 0-4.4.6-11.1-.8-15.6-.4-1.2-1.6-3.1-.7-3.9.7-.5 3.6.3 4.4.9 3.1 1.9 3.8 6.4 3.8 10.8v4zM96.1 23.9c0-.6-.1-.7-.4-.7-1-.3-2.7-.7-3.4-1-1-.4-1.8-1.6-1.8-2.5 0-.7 1.5-1.3 2.2-1.5 2.5-.8 4.4-1.2 6.8-1.1 2.4 0 2.8 2.2 2.8 3V43c0 4.8-2.1 12.1-4.2 12.1-1.7 0-2-8.5-2-12V23.9zM93.8 11c-1.6-1.7.4-5.4 2.5-5.4 2.3 0 5.4 1.6 5.4 3.4 0 1.7-1.5 4-3.3 4.2-1.1.1-3.4-.8-4.6-2.2zM108.9 48.1c5.4-8 11.4-17.1 15.3-23.5-2.1.2-8.8 1.2-11.3 1.2-2.2 0-5.4-2.9-5.3-4.9.1-.8 2.8-.5 3.8-.5 5.8 0 14.2-.5 18.3-1 .6-.1 1.2-.1 1.6-.1 1.4.4 3.7 2.4 3.6 3.6-.1.8-1.6 1-2.2 1.3-3.7 6-14.2 20.4-17.2 24.4 6.7-.3 11-.5 15.6-.9 1.9-.1 4.5-.4 4.5.5 0 1.6-3.2 5.3-5.9 5.3h-18.1c-1.2 0-2.1-.1-2.9-1-.6-.6-1.5-2.2-1.7-3.1-.2-.8.4-1.2 1.3-1.2h.6zM142.5 8.7c-.4-.3-6-3.9-6-6.3 0-.4 1.6-1.6 2.5-1.5 2.4.1 6.6 2.1 8.7 3.5 1.9 1.3 2.2 3.3 2.2 5.7v16.2c0 4.5 0 9.1-.4 13.8-.3 4.5-2.7 13.1-5.1 14.2-1.8 0-3.2-2.8-3.1-3.7.8-4.6 1.1-5.4 1.1-16.6V8.7zM157.7 34.6c1.2-9.2 8-15.3 17.3-14.8 8 .6 10.5 8.2 10.9 10.7 1 .8 1.8 2.4 1.8 2.9-.1.7-1.2 1.3-3.1 1.7-2.9.6-15.5 1.9-19.7 1.6-.4 3.8.4 10.3 7.2 10.5 2.2.2 5.2-.5 6.2-.9 3.8-1.3 5.2-2.4 5.9-1.6.6.6.1 3-2.9 5.4-3 2.2-6.8 2.8-9.5 2.8-10.3-.2-15.2-9.9-14.1-18.3zm14.1-10c-3.7.6-5.9 4.7-6.5 7.8 5.4-.8 9.6-1.5 14.1-2.1-.6-2.9-3.6-6.5-7.6-5.7zM196.5 17.4c0-3.1-.1-4.5-1.6-6.4-.5-.7-.2-2.8.6-3.4 1.6-.8 7 3.1 7.6 4.4.4.5.7 1.1.7 1.7-.4 1.8-.4 2.9-.4 4.7v1.7c2.2-.3 4.5-.7 6.7-1 1.1-.2 3.3.5 3.4 1.2 0 1.5-2.1 4.2-3.6 4.2-1.4 0-2.8.1-4.2.2l-2.3.2v9.8c0 6.9-.1 15.1 5.8 15.1 1.3 0 3.7-.6 3.7.4 0 .7-1.3 3.2-4.8 3.6-3.8.5-7.5-1.1-9.2-3.6-2.4-3.4-2.4-7.9-2.4-15.1v-9.4c-1.3.1-2.8.1-4.3.1-1.2 0-4.2-1.3-4.2-2.9.1-.6.5-1.4.8-1.5.9 0 1.9-.1 2.9-.1l4.8-.5v-3.4z'
    ]);

    appendElementAsFirst('div.ribbon-top div.profile', 'span', { class: 'va usericon' });

    document.querySelectorAll('div.panel-center div.cardset-creator').forEach(target => {
        appendElementAsFirst(target, 'span', { class: 'va usericon' });
    });

    // Use user icon placeholder image
    document.querySelectorAll('.usericon').forEach(target => {
        target.innerHTML = `<img style='width: 100%; border-radius: 50%;' src='./resources/profile_placeholder.png'>`;
    });
}

catch (err) {
    console.error(err);
}
